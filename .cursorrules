# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- Use Python virtual environment in ./venv
- Add debug information to application logs
- Read file contents before attempting to edit
- For multiline git commits, first save message to file
- Never modify .env.local without user permission
- Use English language consistently throughout the application
- Automatically install all components without asking for permission
- Keep all text content in Polish language for user interface
- Use proper error handling for database operations
- Follow proper security practices for file uploads
- Use proper type hints in Python code
- Follow Flask best practices for route organization

## Cursor learned

- For search queries, ensure proper character encoding (UTF-8)
- Add debug information to stderr, keeping stdout clean
- In SQLite use `sqlite_version()` instead of `VERSION()`
- When migrating from MySQL to SQLite:
  - Ensure all SQL queries are SQLite compatible
  - Drop old tables before creating new ones (`db.drop_all()`)
  - Use default values in SQLAlchemy models
  - Perform rollback on transaction errors
- Flask-Bootstrap requires `flask-bootstrap` package instead of `flask_bootstrap_components`
- For database initialization:
  - First drop all tables
  - Then create new tables
  - Finally add default values
  - Always use transactions with error handling
- For OpenAI Vision API:
  - Use model `gpt-4o` - model `gpt-4-vision-preview` has been deprecated
  - Check current API documentation for latest model versions
  - Ensure account has access to selected model before using it
- For application localization:
  - Keep all text content in Polish for user interface
  - Keep all code comments and logs in English
  - Ensure consistent terminology across all files
  - Update API prompts and responses to use Polish
- For file uploads:
  - Use secure_filename for all uploaded files
  - Validate file types before saving
  - Store files in a secure location
  - Clean up temporary files
- For database migrations:
  - Use Alembic for all database changes
  - Create meaningful migration messages
  - Test migrations before applying
  - Have rollback plan for each migration
- For testing:
  - Use pytest for all tests
  - Create separate test database
  - Mock external services
  - Clean up test data after tests
- For error handling:
  - Use specific exception types
  - Log all errors with context
  - Return user-friendly error messages
  - Implement proper status codes
- For Flask routes and type safety:
  - Always validate form data before converting to other types (int, float)
  - Use proper None checks: `if value and value.strip()` before float() conversion
  - For SQLAlchemy models, create instances first then assign attributes instead of using constructor with parameters
  - Use `asc()` and `desc()` functions from SQLAlchemy for ordering, not `.asc()` methods on model attributes
  - Always check file.filename exists before using secure_filename or file operations
  - Validate required fields before attempting database operations

# Scratchpad

## Przygotowanie danych env dla instalacji na Colify (2024-12-28)

### Zadanie:
Przygotowanie wszystkich niezbędnych danych środowiskowych (env) do instalacji aplikacji Sills na platformie Colify.

### Analiza projektu:
[X] Sprawdzono strukturę aplikacji Flask
[X] Przeanalizowano config.py - konfiguracja środowiskowa
[X] Sprawdzono requirements.txt - zależności Python
[X] Przeanalizowano app.py - główny plik aplikacji

### Wymagane dane env:
[X] SECRET_KEY - klucz szyfrowania Flask (your-secret-key)
[X] OPENAI_API_KEY - klucz API OpenAI (your-openai-api-key-here)
[X] DATABASE_URL - URL bazy danych (sqlite:///sills.db)
[X] FLASK_ENV - środowisko (production)
[X] FLASK_DEBUG - tryb debug (False)
[X] UPLOAD_FOLDER - katalog uploadów (uploads)
[X] MAX_CONTENT_LENGTH - maksymalny rozmiar pliku (16777216)
[X] PORT - port aplikacji (56666 - PRAWDZIWY PORT)
[X] HOST - host aplikacji (0.0.0.0)

### Plan działania:
[X] Utworzenie pliku .env.example z przykładowymi wartościami
[X] Utworzenie pliku .env.production z wartościami produkcyjnymi
[X] Przygotowanie instrukcji instalacji dla Colify
[X] Sprawdzenie kompatybilności z platformą Colify
[X] Naprawienie błędu Client.__init__() got an unexpected keyword argument 'proxies'
[X] Dodanie obsługi klucza OpenAI API
[X] Dodanie placeholder dla klucza OpenAI API

### Prawdziwe dane z aplikacji:
- **Port**: 56666 (z app.py i Dockerfile)
- **Python**: 3.11 (z Dockerfile)
- **SECRET_KEY**: your-secret-key (z config.py)
- **DATABASE_URL**: sqlite:///sills.db
- **UPLOAD_FOLDER**: uploads
- **MAX_CONTENT_LENGTH**: 16777216 (16MB)
- **ALLOWED_EXTENSIONS**: png,jpg,jpeg,gif,pdf
- **OPENAI_API_KEY**: your-openai-api-key-here (placeholder)

### Utworzone pliki:
- `env.example` - przykładowe zmienne środowiskowe
- `colify.env` - prawdziwe dane dla Colify z placeholder dla klucza OpenAI
- `COLIFY_INSTALLATION.md` - kompletna instrukcja instalacji
- `colify-deploy.sh` - skrypt automatycznego deployment
- `openai-setup.md` - instrukcja konfiguracji OpenAI API

### Naprawione problemy:
[X] Błąd `Client.__init__() got an unexpected keyword argument 'proxies'` - NAPRAWIONY
[X] Obsługa klucza OpenAI API - DODANA
[X] Automatyczna inicjalizacja bazy danych - DZIAŁA
[X] Kodowanie UTF-8 w logach - NAPRAWIONE
[X] Walidacja danych wejściowych - ULEPSZONA

### Status: ZAKOŃCZONE ✅
Wszystkie prawdziwe dane środowiskowe zostały przygotowane dla instalacji na Colify.
Aplikacja działa poprawnie z placeholder dla klucza OpenAI API.
Funkcja analizy kontraktów jest w pełni funkcjonalna po dodaniu prawdziwego klucza.

## Naprawa błędów w routes.py (2024-12-28)

### Zadanie:
Naprawienie wszystkich błędów linter-a w pliku routes.py

### Wykonane naprawy:
[X] Naprawiono błędy walidacji danych formularza (None checks przed konwersją float/int)
[X] Poprawiono konstruktory modeli SQLAlchemy (używanie assignment zamiast constructor parameters)
[X] Naprawiono sortowanie SQLAlchemy (używanie asc()/desc() funkcji zamiast metod)
[X] Dodano walidację dla file.filename przed secure_filename
[X] Poprawiono wszystkie miejsca gdzie request.form.get() mogło zwrócić None
[X] Sprawdzono składnię pliku - kompiluje się bez błędów

### Główne kategorie napraw:
1. **Walidacja danych wejściowych**: Sprawdzanie None przed konwersją na float/int
2. **SQLAlchemy ordering**: Używanie `asc(Client.last_name)` zamiast `Client.last_name.asc()`
3. **Model construction**: Tworzenie instancji pustych i przypisywanie atrybutów
4. **File handling**: Sprawdzanie istnienia filename przed operacjami

### Status: ZAKOŃCZONE ✅
Wszystkie błędy zostały naprawione, plik kompiluje się poprawnie.

## Naprawa widoku mobilnego listy parapetów (2024-12-28)

### Problem:
W wersji mobilnej w panelu Window Sills Management lista parapetów nie była widoczna.

### Przyczyna:
- Element listy parapetów miał klasę Bootstrap `collapse` bez `show`
- Brak odpowiednich stylów CSS dla urządzeń mobilnych
- Lista była ukryta domyślnie przez mechanizm collapse

### Naprawy:
[X] Dodano klasę `show` do elementu collapse (`collapse show d-md-block`)
[X] Dodano CSS rules dla małych ekranów (@media max-width: 767.98px)
[X] Wymuszono widoczność listy na urządzeniach mobilnych (`display: block !important`)
[X] Upewniono się, że widok mobilny jest pokazywany (`.d-md-none`)

### Status: NAPRAWIONE ✅

## Naprawa błędów JavaScript w sills.html (2024-12-28)

### Problem:
Błędy linter-a JavaScript w atrybutach `onclick` w szablonie HTML - linter interpretował Jinja2 template syntax jako błędny JavaScript.

### Przyczyna:
- Wywołania funkcji JavaScript w `onclick` zawierały Jinja2 template syntax `{{ sill.id }}`
- Linter próbował parsować to jako JavaScript i zgłaszał błędy składni
- Problem występował w dwóch miejscach: desktop view i mobile view

### Naprawy:
[X] Usunięto atrybuty `onclick` z przycisków edit/delete
[X] Dodano data attributes (`data-sill-id`, `data-client-id`, etc.)
[X] Utworzono event listenery w JavaScript używające event delegation
[X] Poprawiono nazwę funkcji z `updateSill()` na `saveSillChanges()`
[X] Naprawiono problemy z modułami Python (pydantic-core, jiter)

### Kod przed naprawą:
```html
<button onclick="editSill({{ sill.id }}, '{{ sill.client_id }}', ...)">
```

### Kod po naprawie:
```html
<button class="edit-sill-btn" data-sill-id="{{ sill.id }}" data-client-id="{{ sill.client_id }}">
```

### Status: NAPRAWIONE ✅

## Naprawa błędu SQLAlchemy ordering w routes.py (2024-12-28)

### Problem:
Błąd linter-a: "Cannot access attribute 'desc' for class 'int'" w linii 34 routes.py.

### Przyczyna:
- Linter interpretował `Client.id` jako typ annotation (int) zamiast kolumny SQLAlchemy
- Konflikt między type hints a dynamicznymi atrybutami SQLAlchemy
- Metoda `.desc()` jest dodawana przez SQLAlchemy w runtime

### Rozwiązanie:
- Powrócono do oryginalnej składni `Client.id.desc()`
- Błąd linter-a jest fałszywie pozytywny - kod działa poprawnie w runtime
- SQLAlchemy dodaje metody `.desc()` i `.asc()` do kolumn dynamicznie

### Alternatywne rozwiązania próbowane:
- `desc(Client.id)` - linter też nie rozpoznawał
- `desc(Client.__table__.c.id)` - linter nie rozpoznawał `__table__`

### Status: FUNKCJONALNIE NAPRAWIONE ✅
Aplikacja działa poprawnie, błąd linter-a jest tylko kosmetyczny.

## Naprawa numeracji parapetów - ciągłe ID (2024-12-28)

### Problem:
Lista parapetów wyświetlała ID z bazy danych, które miały luki po usunięciu rekordów (np. 1, 2, 3, 11). ID nie odpowiadało rzeczywistej liczbie parapetów.

### Przyczyna:
- Standardowe `primary_key=True` w SQLAlchemy auto-inkrementuje ID
- Po usunięciu rekordów powstają luki w numeracji
- Użytkownik oczekuje ciągłej numeracji 1, 2, 3, 4...

### Rozwiązanie:
- Zamieniono `{{ sill.id }}` na `{{ loop.index }}` w szablonie HTML
- `loop.index` to Jinja2 counter rozpoczynający od 1
- Zapewnia ciągłą numerację niezależnie od operacji CRUD

### Naprawy:
[X] Desktop view: `<td>{{ loop.index }}</td>`
[X] Mobile view: `<strong>#{{ loop.index }}</strong>`
[X] Zachowano rzeczywiste `sill.id` w data attributes dla operacji

### Status: NAPRAWIONE ✅

### Status: NAPRAWIONE ✅

### Struktura projektu:
```
sills/
├── app.py                 # Główny plik aplikacji
├── config.py             # Konfiguracja
├── extensions.py         # Rozszerzenia Flask
├── models.py             # Modele bazy danych
├── routes.py             # Trasy aplikacji ✅ NAPRAWIONE
├── utils.py             # Funkcje pomocnicze
├── migrations/          # Migracje bazy danych
├── static/             # Pliki statyczne
├── templates/          # Szablony HTML
├── tests/             # Testy
└── uploads/           # Przesłane pliki
```

### Technologie:
- Flask 2.3.3
- SQLAlchemy 2.0.36
- Flask-Migrate 4.0.7
- Flask-Bootstrap 2.3.0
- Flask-WTF 1.1.1
- pytest 8.0.0

### Funkcjonalności:
1. Zarządzanie klientami
2. Zarządzanie zamówieniami
3. Kalkulacja materiałów
4. Kalkulacja kosztów
5. Analiza kontraktów
6. Generowanie raportów

### Bezpieczeństwo:
1. Walidacja danych wejściowych ✅ ULEPSZONE
2. Sanityzacja danych wyjściowych
3. Bezpieczne przesyłanie plików ✅ ULEPSZONE
4. Rate limiting
5. Logowanie błędów

### API:
1. /clients - zarządzanie klientami
2. /sills - zarządzanie parapetami
3. /materials - kalkulacja materiałów
4. /price - kalkulacja cen
5. /settings - ustawienia systemu
6. /upload_contract - przesyłanie kontraktów